{
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -960,
        0
      ],
      "id": "23855d22-dcc0-4bd4-aa27-708e1752d610",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cec82ea9-82fb-4aa7-8f9d-6c0424afe3a1",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor?.eventType ?? '' }}",
                    "rightValue": "TYPING_EVENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Typing Event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df37d6e6-d2f1-45e7-a2b4-a9f755c34321",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor?.eventType ?? '' }}",
                    "rightValue": "DELETED_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Deletion"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7fe9ec75-f2f1-4cf7-ab94-a9d16545c7d7",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor?.eventType ?? '' }}",
                    "rightValue": "SYSTEM_COMMAND",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Command"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "57b39e1f-1f4e-415f-a88f-fa028b1bcf2c",
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted ? $('Redis - Queue Processor').item.json.switchProcessor.eventType : '' }}",
                    "rightValue": "REACTION",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Reaction"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "386065de-62c2-4404-ad68-6dc5301794d6",
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted ? $('Redis - Queue Processor').item.json.switchProcessor.eventType : '' }}",
                    "rightValue": "VALID_OUTGOING_TEXT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Redis - Queue Processor').isExecuted ? $('Redis - Queue Processor').item.json.switchProcessor.eventType : '' }}",
                    "rightValue": "VALID_OUTGOING_MEDIA",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1d706489-3a54-4088-a2e0-30713981692b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Attachment"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2496,
        16
      ],
      "id": "ea421c8a-9382-4142-9cda-3019803ceb8d",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "=api:instance:{{ $('Get Inbox Token').item.json.data || $('Nml - Instance Token to Cache').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        704,
        176
      ],
      "id": "b5747f3e-2107-417c-893c-f64664072d50",
      "name": "Get Instance Chatwoot Data",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('Get Instance Chatwoot Data').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        912,
        176
      ],
      "id": "a1ea5245-5993-4058-b760-46bddd6a032e",
      "name": "Nml - Instance Chatwoot Cached Data"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $('Redis Keys').item.json.redisKey.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        304,
        48
      ],
      "id": "5d88e62e-0517-49cc-a436-c76ab04d4c05",
      "name": "Get Inbox Token",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "29933430-de0f-47d5-ad7c-3b03ab55bae7",
              "leftValue": "={{ $('Get Inbox Token').item.json.data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        48
      ],
      "id": "3e722310-e288-413e-a446-3c464d9d01a6",
      "name": "No data?1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "256ddb1b-d5d4-4310-a2fb-4599d80ab4c8",
              "name": "redisKey",
              "value": "={{ $('Mrg - Input Data').item.json.extra.installationUrl }}:token:acc{{ $('Mrg - Input Data').item.json.extra.accountId }}:i{{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }}",
              "type": "string"
            },
            {
              "id": "f2891878-0192-47e2-b88a-67c7034f081e",
              "name": "inboxKey",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        304,
        -144
      ],
      "id": "27771452-3f58-4b2d-b909-f37604bb9852",
      "name": "Redis Keys"
    },
    {
      "parameters": {
        "databaseId": 228,
        "tableId": 953,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 9379,
                "operator": "contains",
                "value": "={{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        704,
        -80
      ],
      "id": "30c375ba-9fec-4feb-9f25-180e702a95b8",
      "name": "Filter By Inbox ID",
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "XgJZ5iZG1GTSMra1",
          "name": "[yearsinbox@gmail]"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "47d2f24b-4884-4ec1-aeb0-da819727d746",
              "leftValue": "={{ $('Filter By Inbox ID').item.json['Chatwoot Account Id'][0].value.toNumber() }}",
              "rightValue": "={{ $('Mrg - Input Data').item.json.extra.accountId }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        880,
        -80
      ],
      "id": "77774106-1d6b-4063-a5dc-dbb1b93abcd4",
      "name": "Filter By Account Id",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Redis Keys').item.json.redisKey.split('//')[1].replace(':','Port').replace(/\\./g, '_').replace(/-/g, '_').replace(/_com_br/g, '_br') }}",
        "value": "={{ $('Nml - Instance Token to Cache').item.json.data }}",
        "expire": true,
        "ttl": 2592000
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1440,
        -64
      ],
      "id": "beac6001-469f-491a-8b7d-bb3704d621a2",
      "name": "Cache Inbox Token (30D)",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "14d5054c-2f2b-4feb-8357-bead61bc7519",
              "leftValue": "={{ $('Filter By Account Id').item.json['Instance Token'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1056,
        -80
      ],
      "id": "6141cd3c-2c68-4aab-81da-26e250fec391",
      "name": "No data?2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "784a37e2-c5d3-4bcf-822a-96998e5d7ab7",
              "name": "=data",
              "value": "={{ $('Filter By Account Id').item.json['Instance Token'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1264,
        -64
      ],
      "id": "2a60cb8d-bb43-4d4d-aed1-126ab465c38d",
      "name": "Nml - Instance Token to Cache"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/send/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"text\": {{ $('Nml - Inbox Event').item.json.message.content.toJsonString() }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"replyid\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2768,
        32
      ],
      "id": "596683e7-902a-46de-84ae-b07cffe3c50e",
      "name": "Uazapi - Send Text"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Mrg - Input Data').item.json.extra.installationUrl }}/api/v1/accounts/{{ $('Mrg - Input Data').item.json.extra.accountId }}/conversations/{{ $('Mrg - Input Data').item.json.extra.conversationId }}/messages/{{ $('Mrg - Input Data').item.json.extra.messageId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.userToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"status\": \"delivered\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3872,
        32
      ],
      "id": "fede818a-dfad-4ee2-b64d-f4291bf07e31",
      "name": "Message status - Delivered",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=MID:{{ $('Mrg - Message Data').item.json.messageid }}:TYPE",
        "value": "=text",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3696,
        32
      ],
      "id": "8b6a93b4-2d8a-4c92-b8f3-e87826732a8d",
      "name": "Cache MESSAGE type key",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=MID:{{ $('Uazapi - Send Text').isExecuted ? $('Uazapi - Send Text').item.json.messageid : $('Uazapi - Send Media').item.json.messageid }}",
        "value": "={\"id\":{{ $('Mrg - Input Data').item.json.extra.messageId }},\"status\":\"delivered\",\"cvsId\":{{ $('Mrg - Input Data').item.json.extra.conversationId }}}",
        "expire": true,
        "ttl": 86400
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4048,
        32
      ],
      "id": "2bc12c71-e958-4570-8ffb-a046fe4bda6f",
      "name": "Cache message (As Delivered!)",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2944,
        320
      ],
      "id": "7af3792d-6f8a-45d3-b9a6-4b84ad458b25",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "message.attachments.content",
        "options": {
          "destinationFieldName": "attachment"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2768,
        320
      ],
      "id": "226d5cab-06fc-4c91-8d5f-97062bcde1e3",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b089170-dfc1-48a4-919d-1af997c2c7a0",
              "leftValue": "={{ $('Redis - Queue Processor').item.json.toSend }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        48
      ],
      "id": "625e5244-0f9e-4f76-b128-d60ddc31cf3f",
      "name": "Has Items?"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "Queue finished!"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -240,
        272
      ],
      "id": "f0bd143e-552c-4242-b0e4-8331246a9469",
      "name": "Execution Data"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('When Executed by Another Workflow').first().json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5200,
        48
      ],
      "id": "f5eccedc-fb83-4eab-9aa4-d1962e64a277",
      "name": "InputKeys"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        64,
        32
      ],
      "id": "a5fa07e0-ec61-4b7f-8493-ca8089c70052",
      "name": "Mrg - Input Data",
      "notes": "Pode ter o payload do Lpop ou... quando é typing, do próprio trigger!"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/presence",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"presence\": \"{{ $('Nml - Inbox Event').item.json.event == \"conversation_typing_on\" ? \"composing\" : \"paused\" }}\"\n  {{\n    ($('Nml - Inbox Event').item.json.event == \"conversation_typing_on\"\n      ? `,\"delay\": 4000`\n      : ''\n    )\n  }}\n}",
        "options": {
          "timeout": 2000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3104,
        -720
      ],
      "id": "15fed266-a89e-483a-acfa-d037e975c45e",
      "name": "Uazapi - Composing controller",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('When Executed by Another Workflow').item.json.check.body.event }} ({{ $json.toSend.body.conversation.meta.sender.identifier.split('@')[0] }})"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -336,
        -336
      ],
      "id": "2b0c2165-8ebe-40c1-b1c7-f8570299bb75",
      "name": "Typing Event"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01734203-da2d-485d-9ff6-85d36442cfb6",
              "leftValue": "={{ $('Uazapi - Send Media').item.json.error.message }}",
              "rightValue": "not available",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "dcba89a3-893b-46e6-b5d4-d3a53b1cafc3",
              "leftValue": "={{ $runIndex }}",
              "rightValue": 8,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3344,
        432
      ],
      "id": "6c76529a-f26b-4f98-99cc-f983e3b68c74",
      "name": "Mídia não disponível ainda (8x)?"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3536,
        496
      ],
      "id": "c9656949-99ed-46ec-9285-e73f81174b7e",
      "name": "Wait 2s",
      "webhookId": "f7428125-0bf2-4bd0-97db-2c90a1f50cb3"
    },
    {
      "parameters": {
        "errorMessage": "Checar..."
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3536,
        368
      ],
      "id": "c186bfe9-432f-47f0-8f0e-241a5f680e27",
      "name": "Media unavaliable"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87905f15-a777-4e17-bebe-1a2b13533eea",
              "leftValue": "={{ $json.error.message }}",
              "rightValue": "timeout of 2000ms exceeded",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3280,
        -640
      ],
      "id": "9224e153-8061-4f29-a5f0-ca1bf0a2edf1",
      "name": "Erro programado (release flow timeout)?"
    },
    {
      "parameters": {
        "errorMessage": "Checar!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3488,
        -576
      ],
      "id": "d34a52af-01e0-4e59-83c8-59d08a7903ee",
      "name": "Unknow Error"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Redis - Queue Processor').item.json.lpopResult }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        5392,
        48
      ],
      "id": "24391805-81ac-4b4b-aa44-1dc04dff9ed2",
      "name": "Execution Data1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6c042438-74f7-460e-b896-725b911e3277",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "SYSTEM_COMMAND",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "command_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ [\"conversation_typing_on\", \"conversation_typing_off\"].includes($('When Executed by Another Workflow').item.json.check?.body.event) }}",
                    "rightValue": "typing_event",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "d5eb1a49-c55e-4eea-bb21-0f7df5cfa292"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "typing_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ae5ae1e2-1a47-4fb4-a089-f0ba534c6df1",
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
                    "rightValue": "DELETED_MESSAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "deletion_event"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "55c3a9cd-efac-48ad-8275-72891e19eb20",
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "message_event"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -752,
        -32
      ],
      "id": "3dab31af-f432-4653-ba9c-41c6b6695778",
      "name": "Switch1"
    },
    {
      "parameters": {
        "errorMessage": "Check instance configs: Without Instance Token!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1264,
        -192
      ],
      "id": "739d4eb0-6893-4df0-9cb5-27b64b1958e7",
      "name": "Stop and Error1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO message_map (stanza_id, cw_message_id, installation, cw_account_id, cw_inbox_id, cw_conversation_id, id_with_owner)\nVALUES (\n  'MID:{{ $('Mrg - Message Data').item.json.messageid }}',\n    {{ $('Mrg - Input Data').item.json.extra.messageId }},\n    '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}',\n    {{ $('Mrg - Input Data').item.json.extra.accountId }},\n    {{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }},\n    {{ $('Mrg - Input Data').item.json.extra.conversationId }},\n    '{{ $('Mrg - Message Data').item.json.id }}'\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5008,
        48
      ],
      "id": "b4c25c6c-062a-4ca8-baf6-72d9370efa90",
      "name": "Map Message Ids",
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2768,
        -784
      ],
      "id": "1609ba9c-3a27-49eb-a095-b1bcc30ceccf",
      "name": "Bug temporário"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5f37421d-b3cf-40b7-a1ae-bd482706914a",
              "leftValue": "={{ $('Nml - Inbox Event').item.json.event }}",
              "rightValue": "conversation_typing_off",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2768,
        -624
      ],
      "id": "20df6d47-f175-48bf-84ed-2285aa068ed7",
      "name": "Paused?"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "={{ $('Nml - Inbox Event').item.json.event }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        3488,
        -736
      ],
      "id": "5e2699cf-d6be-4b54-b8a4-5afb4208b68e",
      "name": "Sucess!"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5584,
        656
      ],
      "id": "a91d780c-1cc1-4390-8e47-b9e48f95a36e",
      "name": "Organizer Return Loop"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=context:exec:{{ $executionId }}",
        "value": "={{ JSON.stringify({\n\"instanceToken\": $('Get Inbox Token').item.json.data || $('Nml - Instance Token to Cache').item.json.data\n}) }}",
        "expire": true,
        "ttl": 3600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1264,
        176
      ],
      "id": "af28605c-cd1b-4cb2-8b12-66a0a06cefaa",
      "name": "push Token On Context Key (1h)",
      "credentials": {
        "redis": {
          "id": "30WMRrNcmjIGSU6n",
          "name": "DB 10 - Miscelaneous"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nconst executionId = $execution.id;\nconst processingQueueKey = `processing:exec:${executionId}`;\n\nconst client = createClient({\n  socket: { host: 'redis', port: 6379 },\n  database: 10\n});\n\ntry {\n  await client.connect();\n  await client.del([processingQueueKey, contextKey]);\n} catch (error) {\n  // Apenas registre o erro.\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5584,
        48
      ],
      "id": "25c61c38-c763-4be7-894e-799eef766683",
      "name": "Delete Message Keys"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f3c36c4b-cd7d-42e8-a6f4-38eca7944ded",
              "leftValue": "={{ $('Redis - Queue Processor').item.json.attempt }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4240,
        32
      ],
      "id": "47bf7551-6b62-4523-9a4c-655f5c7f8c1d",
      "name": "Attempts?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM message_map\nWHERE cw_message_id = {{ $('Mrg - Input Data').item.json.extra.messageId }}\n  AND installation = '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}'\n  AND cw_account_id = {{ $('Mrg - Input Data').item.json.extra.accountId }}\n  AND cw_inbox_id = {{ $('Mrg - Input Data').item.json.extra.contac_inbox.inbox_id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4432,
        -96
      ],
      "id": "43df7a20-2556-4f73-96e7-44376ee5d6ad",
      "name": "Delete Maped ID",
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3296,
        32
      ],
      "id": "79d246c6-077d-45db-9263-295cd94113b8",
      "name": "Mrg - Message Data"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "x4Cb70667ZfvNf5m",
          "mode": "list",
          "cachedResultName": "Uazapi Error Handler"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4800,
        -96
      ],
      "id": "63a86950-25c1-4d48-bb78-7a1ed786d66a",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dfb08b08-8cd7-4b51-81fc-7e11cbd786ce",
              "name": "executionId",
              "value": "={{ $execution.id }}",
              "type": "number"
            },
            {
              "id": "1f1a8f53-9d56-4818-96be-9b7349e30cfc",
              "name": "chatId",
              "value": "={{ $('Nml - Inbox Event').item.json.message.chatId }}",
              "type": "string"
            },
            {
              "id": "78863204-9cd0-4ffa-8788-f132fb6a7a25",
              "name": "stanzaId",
              "value": "={{ $('Mrg - Message Data').item.json.messageid }}",
              "type": "string"
            },
            {
              "id": "46d9373d-c1bb-4493-b31c-ad0ec01be34f",
              "name": "attempt",
              "value": "={{ $('Redis - Queue Processor').item.json.attempt }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4608,
        -96
      ],
      "id": "91d06b8b-c166-496b-8134-03d105384a09",
      "name": "inputValues"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Message Deleted"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -336,
        -160
      ],
      "id": "74acdb60-e66a-4ac1-a895-678628e50e46",
      "name": "Deletion Event"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE message_map\nSET deleted = true\nWHERE cw_message_id = {{ $('Mrg - Input Data').item.json.extra.messageId }}\n  AND installation = '{{ $('Mrg - Input Data').item.json.extra.installationUrl }}'\n  AND cw_account_id = {{ $('Mrg - Input Data').item.json.extra.accountId }}\n  AND cw_inbox_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.inboxId }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2992,
        -384
      ],
      "id": "7facafff-0b30-493e-aea4-d2cfc3b37e75",
      "name": "Delete Maped ID1",
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      }
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "data",
              "value": "=Command Event"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1.1,
      "position": [
        -336,
        -544
      ],
      "id": "418579af-f6ba-49b6-b154-264d6d23574f",
      "name": "Command Event"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.command }}",
                    "rightValue": "limpar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "22c64cdc-32e4-4d80-a842-df50c85a7f4b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Limpar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "db19d8a1-ea35-46a8-855f-390e73169ceb",
                    "leftValue": "",
                    "rightValue": "comando2",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "comando2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2672,
        1168
      ],
      "id": "ace41eb3-3fe4-4254-ac4c-d3f11fe26616",
      "name": "Switch2"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\nconst queueKey = $('When Executed by Another Workflow').first().json.queueKey;\nconst lockKey = $('When Executed by Another Workflow').first().json.lockKey;\nconst client = createClient({\n  socket: { host: 'redis', port: 6379 },\n  database: 10\n});\n\nlet queueValue = null;\nlet queueLength = 0;\nlet lockValue = null;\nlet deletedCount = 0;\n\ntry {\n  await client.connect();\n  \n  // Captura valor do lock (string)\n  lockValue = await client.get(lockKey);\n  \n  // Captura valor da queue (lista) - pega toda a lista\n  queueValue = await client.lRange(queueKey, 0, -1);\n  \n  // Conta quantos itens tinha na fila\n  queueLength = await client.lLen(queueKey);\n  \n  // Apaga as chaves\n  deletedCount = await client.del([queueKey, lockKey]);\n  \n} catch (error) {\n  throw new Error(`Falha na operação Redis: ${error.message}`);\n} finally {\n  try {\n    if (client && client.isOpen) {\n      await client.quit();\n    }\n  } catch (closeError) {\n    console.error('Erro ao fechar conexão Redis:', closeError.message);\n  }\n}\n\nreturn {\n  queueKey: queueKey,\n  queueValue: queueValue,\n  queueLength: queueLength,  // ← Quantidade de itens na fila\n  lockKey: lockKey, \n  lockValue: lockValue,\n  deletedCount: deletedCount\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2992,
        1152
      ],
      "id": "35683ab9-ea1c-4d5d-9454-1d47f1b1f279",
      "name": "Delete Message Keys1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "PORwoJguuqvS9Qb4",
          "mode": "list",
          "cachedResultName": "MAIN - Uzapi receptor (TOchatwoot)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3616,
        1152
      ],
      "id": "642f9609-c6e5-40bc-a4bb-3892332a29f8",
      "name": "\"MAIN Uazapi receptor\" Create Sys Message1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae48456-86f1-4013-b4bb-498d9cbe7898",
              "name": "chatId",
              "value": "={{ $('Nml - Inbox Event').item.json.message.chatId }}",
              "type": "string"
            },
            {
              "id": "8106b7f1-9201-4245-b954-ce7a5e07761a",
              "name": "text",
              "value": "=🗑️✅ Fila do contato limpa com sucesso!",
              "type": "string"
            },
            {
              "id": "a37243cc-c4b4-426c-97a1-896b465883eb",
              "name": "instanceToken",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3232,
        1152
      ],
      "id": "092b22ba-6a62-45b0-92f6-07fa956a0966",
      "name": "Data System Message (Chat Info)"
    },
    {
      "parameters": {
        "jsCode": "//var systemMessageType = $('Data System Message (Chat Info)').item.json.systemMessageType;\nvar text = $('Data System Message (Chat Info)').item.json.text;\nvar chatId = $('Data System Message (Chat Info)').item.json.chatId;\nvar instanceToken = $('Data System Message (Chat Info)').item.json.instanceToken;\n\nvar data = {\n  body: {\n    \"EventType\": \"messages\",\n    \"message\": {\n      \"chatid\": chatId,\n      \"content\": {\n        \"text\": \"**SYSTEM:** ...\",\n      },\n      \"fromMe\": true,\n      \"isGroup\": false,\n      \"messageid\": \"\",\n      \"senderName\": \"\",\n      \"source\": \"yib_sys\",\n      \"text\": `**SYSTEM:** ${text}`,\n      \"type\": \"text\",\n      \"wasSentByApi\": false\n    },\n    \"token\": instanceToken\n  },\n  \"executionMode\": \"production\",\n  \"switchProcessor\": {\n    \"eventType\": \"SYSTEM_MESSAGE_ERROR\",\n    \"discordReason\": \"\"\n  }\n}\nreturn [{\n  json: data\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3424,
        1152
      ],
      "id": "2384b8ea-26f8-46ca-97a3-8da4c806cee9",
      "name": "Data System Message (Chat Info)1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/delete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $('Execute a SQL query').item.json.id_with_owner }}\"\n}",
        "options": {
          "timeout": 2000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2768,
        -384
      ],
      "id": "c0d69dbb-ea61-40cb-a1c4-915f0e56493c",
      "name": "Uazapi - Delete message",
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/message/react",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  \"text\": {{ $('Nml - Inbox Event').item.json.message.content.toJsonString() }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"id\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2768,
        -176
      ],
      "id": "a91d534f-5cdd-4c6b-bc35-87b52a73fbed",
      "name": "Uazapi - Send Reaction"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32a6463b-e541-48fc-be79-d5a2eed8279a",
              "leftValue": "={{ $('Nml - Inbox Event').item.json.message.inReplyTo.isReply }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "df7449c1-7e98-4079-bcee-f53456d9553c",
              "leftValue": "={{ $('When Executed by Another Workflow').item.json.switchProcessor.eventType }}",
              "rightValue": "DELETED_MESSAGE",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1856,
        64
      ],
      "id": "e5176075-2bc5-4439-a61f-f8a0c99694a2",
      "name": "Quoted OR Deleted?2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM message_map\nWHERE cw_message_id = {{ $('Nml - Inbox Event').item.json.message.inReplyTo.messageId || $('When Executed by Another Workflow').item.json.extra.messageId }}\nAND cw_account_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.accountId }}\nAND cw_inbox_id = {{ $('Nml - Instance Chatwoot Cached Data').item.json.inboxId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2096,
        -32
      ],
      "id": "827154f3-5dea-445d-93ea-7702cd7b3166",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "L9p4mnsgiaYfT5Pi",
          "name": "yib_api_conector [postgres]"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $('Nml - Inbox Event').item.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2320,
        80
      ],
      "id": "e45a6684-d9b7-4f24-8cf5-7ffcd4697e92",
      "name": "Imediate Input - Inbox Event"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceUrl }}/send/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "={{ $('Nml - Instance Chatwoot Cached Data').item.json.instanceToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $('Nml - Inbox Event').item.json.message.chatId }}\",\n  {{\n    $('Nml - Inbox Event').item.json.message.content\n      ? `\"text\": \"${$('Nml - Inbox Event').item.json.message.content}\",`\n      : ''\n  }}\n  \"type\": \"{{ \n  (() => {\n    const type = $('Split Out').item.json.attachment.type;\n    const typeMap = {\n      \"file\": \"document\",\n      \"audio\": \"ptt\"\n    };\n    return typeMap[type] || type;\n  })() \n}}\",\n  \"file\": \"{{ $('Split Out').item.json.attachment.url }}\"{{\n    $('Split Out').item.json.attachment.type === 'file' ? \n    ',\"docName\": \"' + ($('Split Out').item.json.attachment.fileName || 'File') + '\"' : ''\n  }},\n  \"readchat\": true\n  {{\n      $('Nml - Inbox Event').item.json.message.inReplyTo.isReply && \n        $('Execute a SQL query').item.json.stanza_id ? \n      ',\"replyid\": \"' + $('Execute a SQL query').item.json.stanza_id.replace('MID:','') + '\"' : ''\n  }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3136,
        416
      ],
      "id": "8dcd4741-7055-417e-be80-bff8bd617af9",
      "name": "Uazapi - Send Media",
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// input fictício para n8n, não precisa copiar esta linha no seu nó\ninput = $('Mrg - Input Data').first().json;\n// --- Lógica de Variáveis ---\nconst replyToId = input.toSend.body.content_attributes?.in_reply_to;\n// Acessa o array de anexos de forma segura\nconst sourceAttachments = input.toSend.body.attachments;\n// Calcula a quantidade de anexos. Usa o `?? 0` para garantir que seja um número (0 se não houver anexos).\nconst attachmentsCount = sourceAttachments?.length ?? 0;\n// --- Objeto de Retorno ---\nreturn {\n  event: input.check.body.event,\n  isPrivate: input.check.body.private,\n  agentName: input.toSend.body.conversation.messages[0].sender.available_name,\n  message: {\n    chatId: input.toSend.body.conversation.meta.sender.identifier,\n    content: input.toSend.body.content,\n    inReplyTo: {\n      isReply: !!replyToId,\n      ...(replyToId && { messageId: replyToId }),\n    },\n    // --- Lógica de Anexos Atualizada ---\n    attachments: {\n      attachmentsCount: attachmentsCount,\n      // Adiciona a propriedade 'content' apenas se a contagem for maior que 0\n      ...(attachmentsCount > 0 && {\n        content: sourceAttachments.map(att => {\n          const baseAttachment = {\n            id: att.id,\n            type: att.file_type,\n            url: att.data_url\n          };\n          \n          // Adiciona fileName se o file_type for \"file\"\n          if (att.file_type === 'file') {\n            // Extrai o nome do arquivo da URL (última parte após a /)\n            const urlParts = att.data_url.split('/');\n            const encodedFileName = urlParts[urlParts.length - 1];\n            // Decodifica o nome do arquivo\n            baseAttachment.fileName = decodeURIComponent(encodedFileName);\n          }\n          \n          return baseAttachment;\n        })\n      })\n    },\n  },\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        64
      ],
      "id": "d8968640-cefe-41ce-b597-a8d171b0c1f4",
      "name": "Nml - Inbox Event"
    },
    {
      "parameters": {
        "jsCode": "const { createClient } = require('redis');\n\nvar data = $input.item.json;\nvar queueKey = data.queueKey;\nconst executionId = $execution.id;\nconst processingQueueKey = `processing:exec:${executionId}`;\n\nconst client = createClient({\n  socket: {\n    host: 'redis',\n    port: 6379\n  },\n  database: 10\n});\n\nlet movedPayloadString = null;\n\ntry {\n  await client.connect();\n  //const poppedPayloadString = await client.lPop(queueKey); // Puxa o primeiro item (payload) da fila. ← DEPRECATED!\n\n  movedPayloadString = await client.lMove(queueKey, processingQueueKey, 'LEFT', 'RIGHT'); // Move a mensagem mais antiga da fila principal para a fila de trabalho única ← LATEST!\n  \n  if (movedPayloadString) { // Se um payload foi retornado (movido), processa-o\n    await client.expire(processingQueueKey, 3600); //1h Apenas para limpeza. Worktable efêmero.\n    const remainingCount = await client.lLen(queueKey); // Obtém a quantidade de itens restantes na fila (APÓS remoção do atual!) para debug.\n\n    movedPayloadString = JSON.parse(movedPayloadString); //Parseia o payload retornado.\n    $input.item.json = { ...data, ...movedPayloadString }; // Somar este payload à queueKey & lockKey do input.\n    $input.item.json.lpopResult = `Fila [${queueKey}] agora tem ${remainingCount} itens`; // Debug para execution data (só faz sentido em auto trigger, não em loop... ou, faz em caso de falha)\n  } else {\n    // Se não há mais mensagens para processar, zeramos a fila, precisamos remover o lock. Vou fazer logo aqui em código pra não usar outro node Redis.\n    await client.del(data.lockKey);\n    $input.item.json.lpopResult = `Fila [${queueKey}] esvaziada. Lock removido!`;\n  }\n  \n} catch (error) {\n  throw error;\n} finally {\n  if (client.isOpen) {\n    await client.quit();\n  }\n}\n  \nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        48
      ],
      "id": "6ab0e980-571a-48dc-b53e-5057b00b58f9",
      "name": "Redis - Queue Processor",
      "notes": "O fato de eu concatenar a entrada com a saída pode gerar loop se eu enviar o payload inteiro como input. Porque mesmo que o lmove não retorne nada, eu vou concatenar isso com o payload inteiro, então se for uma mensagem, vai enviá-la em loop."
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Paused?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Delete message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Reaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Instance Chatwoot Data": {
      "main": [
        [
          {
            "node": "Nml - Instance Chatwoot Cached Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Chatwoot Cached Data": {
      "main": [
        [
          {
            "node": "push Token On Context Key (1h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Inbox Token": {
      "main": [
        [
          {
            "node": "No data?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No data?1": {
      "main": [
        [
          {
            "node": "Filter By Inbox ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Keys": {
      "main": [
        [
          {
            "node": "Get Inbox Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter By Inbox ID": {
      "main": [
        [
          {
            "node": "Filter By Account Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter By Account Id": {
      "main": [
        [
          {
            "node": "No data?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Inbox Token (30D)": {
      "main": [
        [
          {
            "node": "Get Instance Chatwoot Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No data?2": {
      "main": [
        [
          {
            "node": "Stop and Error1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Nml - Instance Token to Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Instance Token to Cache": {
      "main": [
        [
          {
            "node": "Cache Inbox Token (30D)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Text": {
      "main": [
        [
          {
            "node": "Mrg - Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message status - Delivered": {
      "main": [
        [
          {
            "node": "Cache message (As Delivered!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache MESSAGE type key": {
      "main": [
        [
          {
            "node": "Message status - Delivered",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache message (As Delivered!)": {
      "main": [
        [
          {
            "node": "Attempts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Mrg - Message Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Send Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Items?": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InputKeys": {
      "main": [
        [
          {
            "node": "Execution Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Input Data": {
      "main": [
        [
          {
            "node": "Redis Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Composing controller": {
      "main": [
        [
          {
            "node": "Sucess!",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Erro programado (release flow timeout)?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Typing Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mídia não disponível ainda (8x)?": {
      "main": [
        [
          {
            "node": "Media unavaliable",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 2s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2s": {
      "main": [
        [
          {
            "node": "Uazapi - Send Media",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Erro programado (release flow timeout)?": {
      "main": [
        [
          {
            "node": "Sucess!",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unknow Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execution Data1": {
      "main": [
        [
          {
            "node": "Delete Message Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Command Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Typing Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Deletion Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis - Queue Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Message Ids": {
      "main": [
        [
          {
            "node": "InputKeys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Paused?": {
      "main": [
        [
          {
            "node": "Bug temporário",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Uazapi - Composing controller",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organizer Return Loop": {
      "main": [
        [
          {
            "node": "Redis - Queue Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "push Token On Context Key (1h)": {
      "main": [
        [
          {
            "node": "Nml - Inbox Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Message Keys": {
      "main": [
        [
          {
            "node": "Organizer Return Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attempts?": {
      "main": [
        [
          {
            "node": "Delete Maped ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Maped ID": {
      "main": [
        [
          {
            "node": "inputValues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrg - Message Data": {
      "main": [
        [
          {
            "node": "Cache MESSAGE type key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Map Message Ids",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inputValues": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deletion Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Event": {
      "main": [
        [
          {
            "node": "Mrg - Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Delete Message Keys1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Message Keys1": {
      "main": [
        [
          {
            "node": "Data System Message (Chat Info)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data System Message (Chat Info)": {
      "main": [
        [
          {
            "node": "Data System Message (Chat Info)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data System Message (Chat Info)1": {
      "main": [
        [
          {
            "node": "\"MAIN Uazapi receptor\" Create Sys Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Delete message": {
      "main": [
        [
          {
            "node": "Delete Maped ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Reaction": {
      "main": [
        [
          {
            "node": "InputKeys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quoted OR Deleted?2": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Imediate Input - Inbox Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Imediate Input - Inbox Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Imediate Input - Inbox Event": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uazapi - Send Media": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mídia não disponível ainda (8x)?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nml - Inbox Event": {
      "main": [
        [
          {
            "node": "Quoted OR Deleted?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis - Queue Processor": {
      "main": [
        [
          {
            "node": "Has Items?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b780b69c87731f6ce3bc879be6a4e1433ff4eb49ccba6717e96bdd4d992b279a"
  }
}